{% macro ne_boundary_cols(type) %}
    gid AS __id__,
    {% filter geometry %}the_geom{% endfilter %} AS __geometry__,
    scalerank::float,
    mz_calculate_output_boundaries(t.*) AS mz_properties,
    '{{ type }}' AS type
{% endmacro %}

{% if zoom < 2 %}

SELECT
    {{ ne_boundary_cols('country') }}
FROM
    ne_110m_admin_0_boundary_lines_land t
WHERE
    {{ bounds|bbox_filter('the_geom') }} AND
    mz_boundary_min_zoom <= {{ zoom }}

{% elif 2 <= zoom < 5 %}

SELECT
    {{ ne_boundary_cols('country') }}
FROM
    ne_50m_admin_0_boundary_lines_land t
WHERE
    {{ bounds|bbox_filter('the_geom') }} AND
    mz_boundary_min_zoom <= {{ zoom }}

UNION ALL

SELECT
    {{ ne_boundary_cols('state') }}
FROM
    ne_50m_admin_1_states_provinces_lines t
WHERE
    {{ bounds|bbox_filter('the_geom') }} AND
    mz_boundary_min_zoom <= {{ zoom }}

{% elif 5 <= zoom < 8 %}

SELECT
    name,
    labelrank,
    {{ ne_boundary_cols('country') }}
FROM
    ne_10m_admin_0_boundary_lines_land t
WHERE
    {{ bounds|bbox_filter('the_geom') }} AND
    mz_boundary_min_zoom <= {{ zoom }}

UNION ALL

SELECT
    name,
    NULL AS labelrank,
    {{ ne_boundary_cols('state') }}
FROM
    ne_10m_admin_1_states_provinces_lines t
WHERE
    {{ bounds|bbox_filter('the_geom') }} AND
    mz_boundary_min_zoom <= {{ zoom }}

{% else %}

SELECT
  name,
  NULL AS maritime_boundary,
  mz_calculate_output_boundaries(planet_osm_polygon.*) AS mz_properties,
  -- note that we force the RHR, which makes outers clockwise,
  -- then take the boundary, then reverse and intersect with
  -- the query bbox. this is needed because Shapely expects a
  -- correctly-oriented outer to run counter-clockwise.
  {% filter geometry %}{{ bounds|bbox_intersection('st_reverse(st_boundary(st_forcerhr(way)))') }}{% endfilter %} AS __geometry__,
  osm_id AS __id__,
  %#tags AS tags

FROM planet_osm_polygon

WHERE
  {{ bounds|bbox_filter('way') }} AND
  mz_boundary_min_zoom <= {{ zoom }}

UNION ALL

SELECT
  NULL AS name,
  'yes' AS maritime_boundary,
  HSTORE('') as mz_properties,
  {% filter geometry %}{{ bounds|bbox_intersection('the_geom') }}{% endfilter %} AS __geometry__,
  gid AS __id__,
  NULL AS tags

FROM buffered_land

WHERE
  {{ bounds|bbox_filter('the_geom') }}

UNION ALL

SELECT
  name,
  NULL AS maritime_boundary,
  mz_calculate_output_boundaries(planet_osm_line.*) AS mz_properties,
  {% filter geometry %}way{% endfilter %} AS __geometry__,
  osm_id AS __id__,
  %#tags AS tags

FROM
  planet_osm_line

WHERE
  {{ bounds|bbox_filter('way') }} AND
  mz_boundary_min_zoom <= {{ zoom }}

{% endif %}
